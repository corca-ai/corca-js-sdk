/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch many products. */
        get: operations["ProductController_fetchMany"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetch one product. */
        get: operations["ProductController_fetchOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/advertisements/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description 지면(구좌)에 나갈 광고 상품들을 응답으로 받을 수 있는 API */
        post: operations["AdvertisementController_advertiseProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/placements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PlacementController_fetchMany"];
        put?: never;
        post: operations["PlacementController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/placements/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["PlacementController_fetchOne"];
        put?: never;
        post?: never;
        delete: operations["PlacementController_remove"];
        options?: never;
        head?: never;
        patch: operations["PlacementController_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NestJSErrorSchema: {
            readonly statusCode: number;
            /** @example string | number */
            readonly message: Record<string, never>;
            readonly error: string;
        };
        Placement: {
            /**
             * @description Corca Ads 어드민에서 생성한 지면의 ID
             * @example 5991eb6e-1794-407c-823d-f0e8720c61d8
             */
            id: string;
            /**
             * @description 지면을 구분하기 위한 이름
             * @example 메인페이지 오늘의 핫딜 상품 광고 지면
             */
            title: string;
            /**
             * @description 지면에 나갈 상품의 개수 | 이 숫자만큼 광고 상품이 반환됩니다.
             * @example 1
             */
            displayCount: number;
            /**
             * @description 지면 활성화 여부
             * @example true
             */
            activated: boolean;
            /** @enum {string} */
            type: PathsPlacementsGetParametersQueryType;
            storeId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        FetchProductResponseDto: {
            store?: components["schemas"]["Store"];
            seller?: components["schemas"]["Seller"];
            idOnStore: string;
            sellerId: string;
            name: string;
            price: number;
            summary: string;
            imageUrl: string;
        };
        AdvertisementRequestDto: {
            /**
             * @description 세션의 고유한 식별자, 세션은 엔드 유저가 스토어 웹을 방문한 순간부터 탭을 닫거나, 브라우저를 종료할 때까지의 기간을 의미합니다.
             * @example 8cca19cc-aea2-4937-9f76-6709ba35c66b
             */
            sessionId: string;
            /**
             * @description 사용자 디바이스를 식별하는 고유한 식별자
             * @example f7c79dd4-bb47-4e87-9815-a724c1503d37
             */
            deviceId: string;
            /**
             * @description 스토어에 로그인한 사용자의 고유한 식별자, 로그인 하지 않은 사용자는 Customer ID를 null로 설정합니다.
             * @example corca0302
             */
            customerId?: string;
            /**
             * @description 광고가 나갈 지면(구좌)의 ID | 코르카 Ads 어드민에서 만든 지면의 ID를 사용합니다.
             * @example 0eae4a71-a99f-44db-8aea-4a8d7e06fc41
             */
            placementId: string;
            /**
             * @description 사용자의 User-Agent, 단순 디버깅 및 분석을 위해 사용되는 데이터로 원치 않는 경우 값을 채워넣지 않아도 됩니다.
             * @example Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36
             */
            userAgent?: string;
        };
        ProductAdvertisementsResponseDto: {
            /** @description 광고 상품 목록 */
            suggestions: components["schemas"]["ProductWithLogOptions"][];
            /** @description 광고 지면 정보 */
            placement: components["schemas"]["PlacementForAdvertisementResponse"];
        };
        ApiErrorSchema: {
            readonly code: number;
            readonly message: string;
            readonly detail: string;
            readonly suggestion: string;
        };
        FetchManyPlacementsResponseDto: {
            /**
             * @description Corca Ads 어드민에서 생성한 지면의 ID
             * @example 5991eb6e-1794-407c-823d-f0e8720c61d8
             */
            id: string;
            /**
             * @description 지면을 구분하기 위한 이름
             * @example 메인페이지 오늘의 핫딜 상품 광고 지면
             */
            title: string;
            /**
             * @description 지면에 나갈 상품의 개수 | 이 숫자만큼 광고 상품이 반환됩니다.
             * @example 1
             */
            displayCount: number;
            /**
             * @description 지면 활성화 여부
             * @example true
             */
            activated: boolean;
            store: components["schemas"]["Store"];
            /** @enum {string} */
            type: PathsPlacementsGetParametersQueryType;
            storeId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        CreatePlacementDto: {
            title: string;
            /** @enum {string} */
            type: PathsPlacementsGetParametersQueryType;
            displayCount?: number;
        };
        FetchPlacementResponseDto: {
            /**
             * @description Corca Ads 어드민에서 생성한 지면의 ID
             * @example 5991eb6e-1794-407c-823d-f0e8720c61d8
             */
            id: string;
            /**
             * @description 지면을 구분하기 위한 이름
             * @example 메인페이지 오늘의 핫딜 상품 광고 지면
             */
            title: string;
            /**
             * @description 지면에 나갈 상품의 개수 | 이 숫자만큼 광고 상품이 반환됩니다.
             * @example 1
             */
            displayCount: number;
            /**
             * @description 지면 활성화 여부
             * @example true
             */
            activated: boolean;
            /** @enum {string} */
            type: PathsPlacementsGetParametersQueryType;
            storeId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
            store: components["schemas"]["Store"];
            adGroups?: components["schemas"]["AdGroupWithSellerAndCampaign"][];
        };
        UpdatePlacementDto: {
            title?: string;
            activated?: boolean;
            displayCount?: number;
        };
        UpdatePlacementResponseDto: {
            /**
             * @description Corca Ads 어드민에서 생성한 지면의 ID
             * @example 5991eb6e-1794-407c-823d-f0e8720c61d8
             */
            id: string;
            /**
             * @description 지면을 구분하기 위한 이름
             * @example 메인페이지 오늘의 핫딜 상품 광고 지면
             */
            title: string;
            /**
             * @description 지면에 나갈 상품의 개수 | 이 숫자만큼 광고 상품이 반환됩니다.
             * @example 1
             */
            displayCount: number;
            /**
             * @description 지면 활성화 여부
             * @example true
             */
            activated: boolean;
            /** @enum {string} */
            type: PathsPlacementsGetParametersQueryType;
            storeId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
            placementDeactivated: boolean;
        };
        Seller: {
            currency: components["schemas"]["Currency"];
            timezone: components["schemas"]["Timezone"];
            id: string;
            name: string;
            users: components["schemas"]["User"][];
            paymentCard: components["schemas"]["PaymentCard"] | null;
            paymentCardId: string | null;
            transactions: components["schemas"]["Transaction"][];
            autoCharge: components["schemas"]["AutoCharge"];
            businessLicense?: components["schemas"]["BusinessLicense"] | null;
            businessLicenseId: string | null;
            relationsAsSeller: components["schemas"]["StoreSeller"][];
            paidCredit: number;
            freeCredit: number;
            creditDecreaseRequests: components["schemas"]["CreditDecreaseRequest"][];
            campaigns: components["schemas"]["Campaign"][];
            adGroups: components["schemas"]["AdGroup"][];
            creditHistories: components["schemas"]["CreditHistory"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        Store: {
            currency: components["schemas"]["Currency"];
            timezone: components["schemas"]["Timezone"];
            id: string;
            name: string;
            businessLicenseId: string | null;
            creditDecreaseRequests: components["schemas"]["CreditDecreaseRequest"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        ProductWithLogOptions: {
            /** @description 성과 식별자 */
            logOptions: components["schemas"]["LogOptionsDto"];
            /** @description 상품 정보 */
            product: components["schemas"]["ProductForAdvertisementsResponse"];
        };
        PlacementForAdvertisementResponse: {
            /**
             * @description Corca Ads 어드민에서 생성한 지면의 ID
             * @example 5991eb6e-1794-407c-823d-f0e8720c61d8
             */
            id: string;
            /**
             * @description 지면을 구분하기 위한 이름
             * @example 메인페이지 오늘의 핫딜 상품 광고 지면
             */
            title: string;
            /**
             * @description 지면에 나갈 상품의 개수 | 이 숫자만큼 광고 상품이 반환됩니다.
             * @example 1
             */
            displayCount: number;
            /**
             * @description 지면 활성화 여부
             * @example true
             */
            activated: boolean;
        };
        AdGroupWithSellerAndCampaign: {
            targets: components["schemas"]["AdGroupTargetKeyValueResponse"][];
            seller: components["schemas"]["Seller"];
            campaign: components["schemas"]["Campaign"];
            id: string;
            title: string;
            /** @enum {string} */
            type: AdGroupWithSellerAndCampaignType;
            placementId: string;
            maxBudgetPerDay: number;
            totalBudgetInPeriod: number | null;
            /** @enum {string} */
            budgetType: AdGroupWithSellerAndCampaignBudgetType;
            dailyUsedBudget: number;
            activated: boolean;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt: string | null;
            storeId: string | null;
            sellerId: string;
            campaignId: string;
            /** @enum {string} */
            latestReviewStatus: AdGroupWithSellerAndCampaignLatestReviewStatus;
            latestReviewId: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        /** @enum {string} */
        Currency: Currency;
        /** @enum {string} */
        Timezone: Timezone;
        User: {
            sellerId: string | null;
            storeId: string | null;
            email: string;
            emailVerified: boolean;
            emailReceiptAgreed: boolean;
            password: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string | null;
            /** @enum {number} */
            role: UserRole;
        };
        PaymentCard: {
            id: string;
            cardCompany: string;
            cardNumber: string;
        };
        AutoCharge: {
            paymentMethod: components["schemas"]["PaymentMethod"];
            sellerId: string;
            amount: number;
            balance: number | null;
            date: number | null;
            activated: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        CreditHistory: {
            creditType: components["schemas"]["CreditType"];
            id: string;
            store: components["schemas"]["Store"] | null;
            storeId: string | null;
            seller: components["schemas"]["Seller"] | null;
            sellerId: string | null;
            /** @enum {string} */
            adjustmentType: CreditHistoryAdjustmentType;
            amount: number;
            /** Format: date-time */
            createdAt: string;
            transactionId: string | null;
            transaction: components["schemas"]["Transaction"] | null;
            creditDecreaseRequestId: string | null;
            creditDecreaseRequest: components["schemas"]["CreditDecreaseRequest"] | null;
            comment: string | null;
        };
        Transaction: {
            currency: components["schemas"]["Currency"];
            paymentMethod: components["schemas"]["PaymentMethod"];
            status: components["schemas"]["Status"];
            category: components["schemas"]["PaymentCategory"];
            type: components["schemas"]["TransactionType"];
            failedReason: components["schemas"]["TransactionFailedReason"];
            id: string;
            impUid: string | null;
            impVBank: components["schemas"]["IamportPaymentVBank"] | null;
            paymentCard: components["schemas"]["TransactionPaymentCard"];
            sellerId: string;
            amount: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            paidAt: string | null;
            creditHistory: components["schemas"]["CreditHistory"];
        };
        BusinessLicense: {
            id: string;
            store: components["schemas"]["Store"];
            seller: components["schemas"]["Seller"];
            companyName: string | null;
            licenseNumber: string | null;
            fileUrl: string;
            /** @enum {string} */
            inspectionStatus: AdGroupWithSellerAndCampaignLatestReviewStatus;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        StoreSeller: {
            id: string;
            store: components["schemas"]["Store"];
            storeId: string;
            seller: components["schemas"]["Seller"];
            sellerId: string;
            sellerIdOnStore: string;
            invitation?: components["schemas"]["SellerInvitation"] | null;
            invitationId: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        AdGroup: {
            id: string;
            title: string;
            /** @enum {string} */
            type: AdGroupWithSellerAndCampaignType;
            placementId: string;
            maxBudgetPerDay: number;
            totalBudgetInPeriod: number | null;
            /** @enum {string} */
            budgetType: AdGroupWithSellerAndCampaignBudgetType;
            dailyUsedBudget: number;
            activated: boolean;
            /** Format: date-time */
            startsAt: string;
            /** Format: date-time */
            endsAt: string | null;
            storeId: string | null;
            sellerId: string;
            campaignId: string;
            /** @enum {string} */
            latestReviewStatus: AdGroupWithSellerAndCampaignLatestReviewStatus;
            latestReviewId: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        Campaign: {
            id: string;
            title: string;
            sellerId: string;
            clickLookbackWindowDays: number;
            impressionLookbackWindowDays: number | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        CreditDecreaseRequest: {
            id: string;
            storeId: string;
            sellerId: string;
            amount: number;
            /** Format: date-time */
            requestedAt: string;
            reason: string;
            rejectionReason: string | null;
            /** @enum {string} */
            status: AdGroupWithSellerAndCampaignLatestReviewStatus;
            /** Format: date-time */
            processedAt: string | null;
            creditHistoryId: string | null;
        };
        LogOptionsDto: {
            /**
             * @description 광고 요청에 대한 식별자
             * @example ADVm24eom2ttdaCD7Oj
             */
            requestId: string;
            /**
             * @description 광고 요청으로 나간 상품의 식별자
             * @example platform_store:354759646
             */
            adsetId: string;
        };
        ProductForAdvertisementsResponse: {
            /**
             * @description 스토어에서 사용하는 상품의 식별자 | 스토어 측에서 상품의 데이터를 내부적으로 조회하려면 이 식별자를 사용하시면 됩니다.
             * @example 354759646
             */
            id: string;
        };
        AdGroupTargetKeyValueResponse: {
            key: components["schemas"]["AdGroupTargetKey"];
            id: string;
            label: string;
            value: string;
            keyId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string;
        };
        /** @enum {string} */
        PaymentMethod: PaymentMethod;
        /**
         * @default Pending
         * @enum {string}
         */
        Status: Status;
        /**
         * @default AUTO_CHARGE
         * @enum {string}
         */
        PaymentCategory: PaymentCategory;
        /**
         * @default PAY
         * @enum {string}
         */
        TransactionType: TransactionType;
        /** @enum {string} */
        TransactionFailedReason: TransactionFailedReason;
        IamportPaymentVBank: {
            vbank_code: string;
            vbank_date: number;
            vbank_holder: string;
            vbank_issued_at: number;
            vbank_name: string;
            vbank_num: string;
        };
        TransactionPaymentCard: {
            cardCompany: string;
            cardNumber: string;
        };
        /** @enum {string} */
        CreditType: CreditType;
        SellerInvitation: {
            id: string;
            storeSeller?: components["schemas"]["StoreSeller"] | null;
            storeSellerId: string | null;
            licenseNumber: string;
            /** @enum {string} */
            status: SellerInvitationStatus;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string | null;
        };
        AdGroupTargetKey: {
            id: string;
            store: components["schemas"]["Store"];
            storeId: string;
            name: string;
            label: string;
            selectValues: components["schemas"]["AdGroupTargetValue"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string;
        };
        AdGroupTargetValue: {
            id: string;
            label: string;
            value: string;
            keyId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ProductController_fetchMany: {
        parameters: {
            query?: {
                /** @description ProductSortOption */
                orderBy?: string[];
                sellerId?: string;
                sellerIdOnStore?: string;
                storeId?: string;
                startDate?: string;
                endDate?: string;
                categoryId?: string;
                activated?: boolean;
                name?: string;
                idOnStore?: string;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        count?: number;
                        items?: components["schemas"]["FetchProductResponseDto"][];
                    };
                };
            };
            /** @description <b>COMMON.PAGINATION_LIMIT_TOO_LARGE</b> &nbsp; `10015`  */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
    ProductController_fetchOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchProductResponseDto"];
                };
            };
        };
    };
    AdvertisementController_advertiseProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdvertisementRequestDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductAdvertisementsResponseDto"];
                };
            };
            /** @description <b>code:</b> 10002<br/><b>message:</b> 올바르지 않은 광고 지면 ID 형식입니다.<br/><b>detail:</b> 지면 ID는 UUID 형식이어야 합니다.<br/><b>suggestion:</b> placementId가 올바른 형식인지 확인해주세요.<br/><br/><b>code:</b> 10017<br/><b>message:</b> 광고 지면 ID가 누락되었습니다.<br/><b>detail:</b> placementId는 필수 입력값입니다.<br/><b>suggestion:</b> 지면의 메타데이터를 생성하지 않았다면, Ads Admin 웹에서 생성하여 요청에 포함해주세요.<br/><br/><b>code:</b> 10018<br/><b>message:</b> 세션 ID가 누락되었습니다.<br/><b>detail:</b> sessionId는 필수 입력값입니다.<br/><b>suggestion:</b> sessionId가 포함된 요청을 다시 시도해주세요.<br/><br/><b>code:</b> 10019<br/><b>message:</b> 디바이스 ID가 누락되었습니다.<br/><b>detail:</b> deviceId는 필수 입력값입니다.<br/><b>suggestion:</b> deviceId가 포함된 요청을 다시 시도해주세요.<br/><br/><b>code:</b> 12005<br/><b>message:</b> 광고 송출에 필요한 최소 상품 수가 부족합니다.<br/><b>detail:</b> displayCount보다 광고 가능한 상품의 수가 적습니다.<br/><b>suggestion:</b> placement의 displayCount를 줄이거나, 광고 가능한 상품을 추가해주세요. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorSchema"];
                };
            };
            /** @description <b>code:</b> 12001<br/><b>message:</b> 요청하신 광고 지면을 찾을 수 없습니다.<br/><b>detail:</b> 입력하신 placementId에 해당하는 광고 지면이 존재하지 않습니다.<br/><b>suggestion:</b> Ads Admin 웹에서 확인하여 올바른 placementId를 사용했는지 확인해주세요.<br/><br/><b>code:</b> 12006<br/><b>message:</b> 현재 게시 가능한 광고 그룹이 없습니다.<br/><b>detail:</b> 광고 지면에서 노출 가능한 광고 그룹이 없습니다.<br/><b>suggestion:</b> 해당 지면을 사용하는 광고주들이 크레딧, 일일 예산 한도, 운영 기간 등을 확인해야합니다. 잠시 후 다시 시도해주세요. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorSchema"];
                };
            };
            /** @description <b>code:</b> 12008<br/><b>message:</b> 광고 송출 과정에서 일시적인 문제가 발생했습니다.<br/><b>detail:</b> 서버 내부에서 일시적인 오류가 발생했습니다.<br/><b>suggestion:</b> 잠시 후 다시 시도해주세요. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorSchema"];
                };
            };
            /** @description <b>code:</b> 12007<br/><b>message:</b> 광고 추천 처리 중 일시적인 문제가 발생했습니다.<br/><b>detail:</b> 서버 내부에서 일시적인 오류가 발생했습니다.<br/><b>suggestion:</b> 잠시 후 다시 시도해주세요. */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiErrorSchema"];
                };
            };
        };
    };
    PlacementController_fetchMany: {
        parameters: {
            query?: {
                /** @description PlacementSortOption */
                orderBy?: string[];
                select?: PathsPlacementsGetParametersQuerySelect[];
                title?: string;
                startDate?: string;
                endDate?: string;
                type?: PathsPlacementsGetParametersQueryType;
                activated?: boolean;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        count?: number;
                        items?: components["schemas"]["FetchManyPlacementsResponseDto"][];
                    };
                };
            };
            /** @description <b>COMMON.PAGINATION_LIMIT_TOO_LARGE</b> &nbsp; `10015` <br/><br/><b>COMMON.INVALID_URL</b> &nbsp; `10008`  */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
    PlacementController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlacementDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Placement"];
                };
            };
            /** @description <b>PLACEMENT.INVALID_DISPLAY_COUNT</b> &nbsp; `21012` <br/><br/><b>PLACEMENT.INVALID_PLACEMENT_FORMAT</b> &nbsp; `21013` <br/><br/><b>CLIENT.CLIENT_NOT_FOUND</b> &nbsp; `16001`  */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
    PlacementController_fetchOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchPlacementResponseDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            /** @description <b>PLACEMENT.PLACEMENT_NOT_FOUND</b> &nbsp; `21001`  */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
    PlacementController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            /** @description <b>PLACEMENT.PLACEMENT_NOT_FOUND</b> &nbsp; `21001`  */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            /** @description <b>PLACEMENT.DELETE_PLACEMENT_FAILED</b> &nbsp; `21009`  */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
    PlacementController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePlacementDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdatePlacementResponseDto"];
                };
            };
            /** @description <b>PLACEMENT.INVALID_DISPLAY_COUNT</b> &nbsp; `21012` <br/><br/><b>PLACEMENT.TOO_FEW_CONNECTED_ADSETS</b> &nbsp; `21014`  */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
            /** @description <b>PLACEMENT.PLACEMENT_NOT_FOUND</b> &nbsp; `21001`  */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NestJSErrorSchema"];
                };
            };
        };
    };
}
export enum PathsPlacementsGetParametersQuerySelect {
    id = "id",
    title = "title",
    type = "type",
    suggestionType = "suggestionType",
    displayCount = "displayCount",
    activated = "activated",
    pageName = "pageName",
    clientId = "clientId",
    injector = "injector",
    screenShot = "screenShot",
    displayFormatWidth = "displayFormatWidth",
    displayFormatHeight = "displayFormatHeight",
    property = "property",
    placementFormatRatio = "placementFormatRatio",
    createdAt = "createdAt",
    updatedAt = "updatedAt",
    deletedAt = "deletedAt"
}
export enum PathsPlacementsGetParametersQueryType {
    GRID = "GRID",
    BANNER = "BANNER"
}
export enum AdGroupWithSellerAndCampaignType {
    GRID = "GRID"
}
export enum AdGroupWithSellerAndCampaignBudgetType {
    DAILY_BUDGET = "DAILY_BUDGET",
    TOTAL_BUDGET_IN_PERIOD = "TOTAL_BUDGET_IN_PERIOD",
    MAX_BUDGET_PER_DAY = "MAX_BUDGET_PER_DAY"
}
export enum AdGroupWithSellerAndCampaignLatestReviewStatus {
    PENDING = "PENDING",
    APPROVED = "APPROVED",
    REJECTED = "REJECTED"
}
export enum Currency {
    KRW = "KRW",
    USD = "USD",
    VND = "VND"
}
export enum Timezone {
    KST = "KST",
    ICT = "ICT",
    EST = "EST",
    CST = "CST",
    MST = "MST",
    PST = "PST",
    AKST = "AKST",
    HST = "HST"
}
export enum UserRole {
    Value0 = 0,
    Value1 = 1,
    Value2 = 2
}
export enum CreditHistoryAdjustmentType {
    INCREASE = "INCREASE",
    DECREASE = "DECREASE"
}
export enum PaymentMethod {
    Card = "Card",
    DirectBank = "DirectBank",
    VBank = "VBank",
    HPP = "HPP"
}
export enum Status {
    Pending = "Pending",
    Ready = "Ready",
    Completed = "Completed",
    Unauthorized = "Unauthorized",
    Failed = "Failed",
    Closed = "Closed",
    Cancelled = "Cancelled"
}
export enum PaymentCategory {
    AUTO_CHARGE = "AUTO_CHARGE"
}
export enum TransactionType {
    PAY = "PAY",
    REFUND = "REFUND"
}
export enum TransactionFailedReason {
    CLOSED_CARD = "CLOSED_CARD",
    BALANCE_INSUFFICIENT = "BALANCE_INSUFFICIENT",
    ETC = "ETC"
}
export enum CreditType {
    SELLER_SELF_PAID = "SELLER_SELF_PAID",
    STORE_PAID = "STORE_PAID",
    ADMIN_ADJUST_PAID = "ADMIN_ADJUST_PAID",
    FREE = "FREE",
    ADMIN_ADJUST_FREE = "ADMIN_ADJUST_FREE"
}
export enum SellerInvitationStatus {
    NEW_CLIENT_INVITED = "NEW_CLIENT_INVITED",
    EXISTING_CLIENT_INVITED = "EXISTING_CLIENT_INVITED",
    VERIFYING = "VERIFYING"
}
